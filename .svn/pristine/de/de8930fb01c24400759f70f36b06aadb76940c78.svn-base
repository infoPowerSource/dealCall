package com.deal.service.sms.impl;

import java.sql.Timestamp;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.ws.rs.core.MediaType;

import org.codehaus.plexus.util.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.deal.dao.create.ConfAccessNumDao;
import com.deal.dao.sms.SMSSendRecordDao;
import com.deal.dao.sms.SMSSendTaskDao;
import com.deal.dao.sms.SMSTemplateDao;
import com.deal.entity.create.ConferenceAccessNumber;
import com.deal.entity.create.ConferenceInfo;
import com.deal.entity.create.CustomerInfo;
import com.deal.entity.mss.MSSSendTask;
import com.deal.entity.sms.Note;
import com.deal.entity.sms.ResultNote;
import com.deal.entity.sms.SMSSendRecord;
import com.deal.entity.sms.SMSSendTask;
import com.deal.entity.sms.SMSTemplate;
import com.deal.service.sms.ISMSService;
import com.deal.util.Consts;
import com.deal.util.DateFormatUtil;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.WebResource;

@Service
public class SMSServiceimpl implements ISMSService{

	private static Logger logger = LoggerFactory.getLogger(SMSServiceimpl.class);
	@Value("${deal.sendNoteUrl}")
	private String sendNoteUrl;
	@Value("${deal.businesscode}")
	private String businesscode;
	@Autowired
	private SMSSendRecordDao smsDao;
	@Autowired
	private SMSSendTaskDao taskDao;
	private Client client;
	@Autowired
	private SMSTemplateDao templateDao;
	@Value("${platform2moreAccessNumber}")
	private String moreAccessNumberFor2;
	@Value("${platform7moreAccessNumber}")
	private String moreAccessNumberFor7;
	@Autowired
	private ConfAccessNumDao accessDao;

	public Client getClient(){
		if(client == null){
			client = Client.create();
		}
		return client;
	}

	public ResultNote sendSMSNow(Note note){
		try{
			Client client = getClient();
			WebResource webResource = client.resource(sendNoteUrl);
			webResource.accept(MediaType.APPLICATION_XML_TYPE);
			note.setBusinesscode(businesscode);
			return webResource.post(ResultNote.class, note);
		}catch (Exception e){
			logger.error("短信发送异常，手机号码=" + note.getPhone(), e);
			e.printStackTrace();
			throw new RuntimeException("短信发送异常，手机号码=" + note.getPhone() + "异常信息:" + e);
		}
	}

	@Override
	public int sendSMS(Note note, ConferenceInfo confInfo){
		int sendResult = 0;
		if(StringUtils.isEmpty(note.getPhone()) || StringUtils.isBlank(note.getContents())){
			logger.error("短信发送信息不全,请检查短信号码和发送内容！");
			return 0;
		}else{
			SMSSendRecord record = new SMSSendRecord();
			record.setConfInfo(confInfo);
			putDataToSMSRecord(record, note);
			sendResult = getSendResult(note, sendResult, record);
		}
		return sendResult;
	}

	private int getSendResult(Note note, int sendResult, SMSSendRecord record){
		try{
			ResultNote result = sendSMSNow(note);
			if(result != null && !result.getResult().equals("0")){
				record.setIfSuccess(Consts.SMS_SEND_SUCCESS_FLAG);
				sendResult = 1;
				logger.info("sendSMS result:" + result.getResult() + " phone:" + note.getPhone());
			}else{
				record.setIfSuccess(Consts.SMS_SEND_FALSE_FLAG);
				logger.error("sendSMS error!" + result.getResult() + " phone:" + note.getPhone());
			}
			smsDao.save(record);
		}catch (Exception e){
			logger.error("sendSMS post ClientHandler error info:" + e.getMessage() + " phone:" + note.getPhone());
		}
		return sendResult;
	}

	@Override
	public int sendVerifySMS(String phone, String content, String billingcode){
		int sendResult = 0;
		SMSSendRecord record = new SMSSendRecord();
		Note note = new Note();
		putDataToNote(phone, content, billingcode, note);
		putDataToSMSRecord(record, note);
		sendResult = getSendResult(note, sendResult, record);
		return sendResult;
	}

	private void putDataToSMSRecord(SMSSendRecord record, Note note){
		record.setContent(note.getContents());
		record.setReceiver(note.getPhone());
		record.setSentTime(new Timestamp(System.currentTimeMillis()));
		record.setSmsType(Consts.CONFERENCE_SMS_TYPE_VERIFY);
	}

	private void putDataToNote(String phone, String content, String billingcode, Note note){
		note.setBillingcode(billingcode);
		note.setPhone(phone);
		note.setContents(content);
	}

	@Override
	public void sendSMSByTask(Map<String, Object> params){
		String mailType = params.get("mailType").toString();
		int type = Integer.valueOf(mailType);
		if(type == Consts.EMAIL_TYPE_FOR_INFORM_BC_WARNING || type == Consts.EMAIL_TYPE_FOR_INFORM_PC_WARNING){
			sendWarningInfo(params, type);
		}else{
//			List<SMSTemplate> templateList = Lists.newArrayList();
			ConferenceInfo confInfo = (ConferenceInfo) params.get("confInfo");
			CustomerInfo custInfo = (CustomerInfo) params.get("custInfo");
			SMSTemplate template=null;
			int language=1;
			if(custInfo.getCustContryCode().contains("86")){
				language=0;
			}
			try{
				template = templateDao.getTempByTypeAndLanguage(type,language);
			}catch (Exception e){
				logger.error("查询模板为空，模板类型" + mailType + "异常信息:" + e.getMessage());
			}
			if(ObjectUtils.isEmpty(template)){
				logger.error("没有可用的模板,模板类型：" + mailType);
			}else{
				
//				List<CustomerInfo> custmerinfo = (List<CustomerInfo>) params.get("custList");
//				for(SMSTemplate template : templateList){
					SMSSendTask task = new SMSSendTask();
					String content = template.getTemplateContent();
					int languageIndex = template.getTemplateLanguage();
					if(type == Consts.EMAIL_TYPE_FOR_INFORM_CUSTOMER){
						content = getInformCustomerContent(confInfo, content, languageIndex);
					}else if(type == Consts.EMAIL_TYPE_FOR_INFORM_CANCEL_EXPERT){
						content = getInformExpertContent(confInfo, custInfo, content);
					}else if(type == Consts.EMAIL_TYPE_FOR_INFORM_CANCEL_CUSTOMER){
						content = getInformCustomerContent(confInfo, content, languageIndex);
					}else if(type == Consts.EMAIL_TYPE_FOR_INFORM_EXPERT){
						content = getInformExpertContent(confInfo, custInfo, content);
					}else if(type == Consts.EMAIL_TYPE_FOR_INFORM_CHANGE_CUSTOMER){
						content = getInformCustomerContent(confInfo, content, languageIndex);
					}else if(type == Consts.EMAIL_TYPE_FOR_INFORM_CHANGE_EXPERT){
						content = getInformExpertContent(confInfo, custInfo, content);
					}
					task.setSmsContent(content);
					task.setIsHandle(Consts.IS_NOT_HANDLE_FLAG);
					if(custInfo.getCustContryCode().contains("86")){
						task.setReceive(custInfo.getCustTel());
					}else{
						String tel=custInfo.getCustTel().replaceFirst("^0*","");
						String newTel=custInfo.getCustAreacode()+tel;
						task.setReceive(newTel);
					}
					task.setSmsType(type);
					saveDateToSendTask(task);
//				}
			}
		}
	}

	private void sendWarningInfo(Map<String, Object> params, int type){
		String content = params.get("content").toString();
		SMSSendTask task = new SMSSendTask();
		task.setIsHandle(Consts.IS_NOT_HANDLE_FLAG);
		task.setReceive(params.get("phone").toString());
		task.setSmsContent(content);
		task.setSmsType(type);
		saveDateToSendTask(task);
	}
	private void saveDateToSendTask(SMSSendTask smsTask){
		try{
			taskDao.save(smsTask);
		}catch (Exception e){
			logger.error("保存短信发送任务信息出错，短信接收号码：" + smsTask.getReceive() + "错误信息:" + e);
		}
	}

	private String getInformExpertContent(ConferenceInfo confInfo, CustomerInfo custInfo, String content){
		Map<String, String> dataMap = Maps.newHashMap();
		dataMap.put("${userDisplayName}", confInfo.getConfCreater());
		dataMap.put("${emailTitle}", confInfo.getConfName());
		dataMap.put("${beginTime}", getBeginTime(confInfo.getBeginTime()));
		dataMap.put("${confDuration}", DateFormatUtil.getDurationTime(confInfo.getBeginTime(), confInfo.getConfDuration()));
		dataMap.put("${custTel}", custInfo.getCustTel());
		for(Map.Entry<String, String> entry : dataMap.entrySet()){
			content = StringUtils.replace(content, entry.getKey(), entry.getValue());
		}
		return content;
	}

	private String getCancelExpertContent(ConferenceInfo confInfo, String content){
		Map<String, String> dataMap = Maps.newHashMap();
		dataMap.put("${userDisplayName}", confInfo.getConfCreater());
		dataMap.put("${emailTitle}", confInfo.getConfName());
		dataMap.put("${beginTime}", getBeginTime(confInfo.getBeginTime()));
		dataMap.put("${confDuration}", DateFormatUtil.getDurationTime(confInfo.getBeginTime(), confInfo.getConfDuration()));
		for(Map.Entry<String, String> entry : dataMap.entrySet()){
			content = StringUtils.replace(content, entry.getKey(), entry.getValue());
		}
		return content;
	}

	private String getInformCustomerContent(ConferenceInfo confInfo, String content, int languageIndex){
		Map<String, String> dataMap = Maps.newHashMap();
		String language = languageIndex == 0 ? "中文" : "英文";
		ConferenceAccessNumber accessNum = null;
		if(confInfo.getBridgeName().equalsIgnoreCase(Consts.PLATEFORM_FOR_SEVEN)){
			accessNum = accessDao.getAccessNumber(confInfo.getBridgeName(), "英文");
		}else{
			accessNum = accessDao.getAccessNumber(confInfo.getBridgeName(), language);
		}
		dataMap.put("${userDisplayName}", confInfo.getConfCreater());
		dataMap.put("${emailTitle}", confInfo.getConfName());
		dataMap.put("${beginTime}", getBeginTime(confInfo.getBeginTime()));
		dataMap.put("${confDuration}", DateFormatUtil.getDurationTime(confInfo.getBeginTime(), confInfo.getConfDuration()));
		dataMap.put("${chairmanPassword}", confInfo.getChairmanPassword());
		if(!ObjectUtils.isEmpty(accessNum)){
			dataMap.put("${accessNumber}", accessNum.getTelNum());
			if(accessNum.getBridgeName().equalsIgnoreCase(Consts.PLATEFORM_FOR_TWO)){
				dataMap.put("${moreAccessNum}", moreAccessNumberFor2);
			}else if(accessNum.getBridgeName().equalsIgnoreCase(Consts.PLATEFORM_FOR_SEVEN)){
				dataMap.put("${moreAccessNum}", moreAccessNumberFor7);
			}
		}
		// String experName = "";
		// if(expert.size() > 0){
		// experName = expert.get(0).getCustName();
		// for(int i = 1; i < expert.size(); i++){
		// experName = experName + "," + expert.get(1).getCustName();
		// }
		// }
		// dataMap.put("${expertName}", experName);
		for(Map.Entry<String, String> entry : dataMap.entrySet()){
			content = StringUtils.replace(content, entry.getKey(), entry.getValue());
		}
		return content;
	}

	@Override
	public int sendSMS(SMSSendTask sendTask){
		int sendResult = 0;
		Note note = new Note();
		note.setPhone(sendTask.getReceive());
		note.setContents(sendTask.getSmsContent());
		SMSSendRecord record = new SMSSendRecord();
		record.setContent(sendTask.getSmsContent());
		record.setReceiver(sendTask.getReceive());
		record.setSentTime(new Timestamp(System.currentTimeMillis()));
		record.setSmsType(sendTask.getSmsType());
		record.setSmsId(sendTask.getSmsId());
		sendResult = getSendResult(note, sendResult, record);
		return sendResult;
	}

	private String getBeginTime(Timestamp beginTime){
		return DateFormatUtil.timeStamaps2StrFormat(beginTime);
	}
}
